package com.leewan.solutions.subject16;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import java.util.TreeSet;

public class Solution2 {


	public static void main(String[] args) {
		Solution solution = new Solution();
		int[] nums = new int[] {370,322,-258,456,43,-154,628,252,484,-141,649,557,-262,-87,-175,24,536,-9,238,23,-69,162,91,-93,-297,-272,-251,250,58,-153,-210,156,479,-1,382,541,147,249,189,36,-177,254,402,517,607,94,438,535,623,559,282,-84,185,236,469,549,-258,-172,215,1,467,429,257,-116,131,139,557,54,558,222,147,660,-211,273,17,659,-195,233,173,-9,536,-126,654,-221,-297,372,572,-6,-94,-88,12,-183,370,-221,-79,531,594,358,-52,164,203,506,604,237,295,219,-38,-69,601,261,550,697,-144,336,128,-158,-112,699,405,-122,50,640,-101,535,-189,92,620,144,465,-260,380,-285,244,385,127,485,241,14,-113,-118,-20,-64,528,-240,682,632,-166,639,-285,461,29,87,-7,135,299,-235,651,3,514,-262,623,518,-191,537,307,-99,490,81,19,-55,155,48,419,109,-180,486,-274,533,347,450,84,361,438,238,145,-154,-34,380,506,-29,508,-164,435,15,523,33,-26,311,686,259,288,652,631,591,-45,262,449,66,623,-46,42,-1,440,143,683,399,418,665,-122,294,-97,-67,-46,263,210,-183,625,-13,508,-194,169,666,-8,377,-292,172,465,266,574,473,529,257,679,396,621,428,248,71,352,303,407,456,-290,204,575,187,-97,201,-251,639,-145,461,362,464,616,450,583,95,228,416,543,637,-61,-188,254,345,-22,-192,680,415,513,-99,-276,117,-189,628,673,405,64,-172,22,9,-139,464,401,682,-282,38,-191,684,-286,-296,210,-143,-234,-207,89,576,-270,172,459,-271,135,-101,446,335,26,-25,549,-117,56,654,299,468,-230,562,143,-181,681,138,53,-78,634,337,499,464,674,244,181,552,576,306,127,173,11,155,557,-265,284,587,201,548,493,134,617,554,-46,-219,411,694,-258,-185,149,327,241,521,215,-255,659,380,-206,408,558,-280,666,-244,631,318,558,517,47,286,260,332,-47,634,-71,50,-101,384,499,556,245,699,368,97,-125,480,113,93,-129,142,302,152,168,-266,120,549,580,439,-127,-280,-18,516,179,452,-70,119,57,301,442,91,-77,426,173,-269,-46,486,-241,-269,206,437,696,2,292,111,-290,-175,473,177,176,-156,509,-279,-119,-252,672,-40,37,84,-67,-212,257,528,415,-291,-95,147,-95,437,50,605,328,-100,90,23,-101,623,-94,204,-224,536,359,243,-34,0,-158,122,401,524,465,-265,47,-55,584,-48,186,37,227,-266,4,471,139,30,-45,-290,154,160,404,-9,-237,658,518,-224,-159,115,384,152,682,354,-83,480,680,415,182,236,222,200,418,383,618,310,111,-182,193,548,257,374,-40,-182,82,667,680,636,262,524,484,312,-32,137,617,-116,-158,110,383,292,378,474,-238,-84,16,405,-253,477,680,-202,-44,592,424,87,633,656,293,-285,-188,584,509,370,-41,-68,622,-201,184,268,318,187,-290,284,152,390,67,-2,612,50,247,611,551,460,-205,11,219,401,686,647,-171,490,669,534,-167,585,620,435,-121,610,408,-160,688,-232,687,241,-32,456,19,319,-185,408,-263,101,-18,465,2,-156,-202,134,588,379,503,599,-7,-57,251,103,659,16,40,-299,231,599,434,226,-61,377,-45,-42,492,688,-291,-182,77,-150,-75,216,340,339,-231,541,602,609,6,88,-146,-229,-145,-249,493,219,596,94,184,368,371,551,633,-50,-120,312,595,59,607,208,-102,8,566,244,-161,240,508,-272,-140,78,-12,-109,18,-171,681,-282,401,-193,-126,237,308,187,79,-120,697,189,367,644,153,-6,54,-284,354,-19,103,-156,-159,300,-274,311,690,554,409,524,556,359,-158,294,423,-123,-53,-256,327,-33,596,292,262,483,365,605,448,374,74,525,154,652,-219,-48,307,59,273,344,202,150,138,39,-294,-122,-102,-160,497,233,-202,409,71,383,356,-150,369,-193,-131,440,197,365,670,-21,-184,-101,164,288,359,-129,212,468,112,-129,-209,211,-26,250,484,14,-146,2,-283,471,153,33,376,-117,-72,395,-112,316,-206,627,581,-73,188,315,685,-264,76,171,124,340,-178,419,-176,-10,508,43,191,257,652,501,-33,115,-116,-170,694,535,-86,687,666,-110,-210,-225,275,326,220,219,414,-29,547,11,677,287,-252,259,-113,192,-297,100,682,512,-119,356,684,233,450,650,60,551,-169,495,155,128,631,88,209,102,-29,-110,96,354,164,-174,437,231,-99,-84,411,455,52,381,77,207,489,-127,42,435,338,241,-127,318,405,443,-270,383,647,483,320,242,-119,58,429,60,174,456,-68,-155,-284,528,457,425,274,55,575,478,-211,646,652,306,5,363,366,152,550,641,156,-292,279,-287,-213,152,287,657,604,460,473,431,-35,-25,131,661,-192,206,659,-171,328,651,85,442,225,-84,-199,191,55,-158,561,621,-180,432,570,-165,20,258,193,-187,79,-239,657,485,178,298,-83,357,310,58,686,536,572,-33,578,305,476,572,138,-36,413,437,574,514,184,-16,-98,-77,-77,-139,
};
		int target = 1;
		long t = System.currentTimeMillis();
		int threeSumClosest = solution.threeSumClosest(nums, target);
		System.out.println(threeSumClosest);
		System.out.println(System.currentTimeMillis() - t);
	}
	
	public int threeSumClosest(int[] nums, int target) {
		Integer rs = null;
		for(int i=0;i<nums.length-2;i++) {
			for(int j=i+1;j<nums.length;j++) {
				for(int k=j+1;k<nums.length;k++) {
					int tmp = nums[i] + nums[j] + nums[k];
					if(rs == null) {
						rs = tmp;
						continue;
					}
					if(Math.abs(rs - target) > Math.abs(tmp - target)) {
						rs = tmp;
					}
					
				}
			}
		}
		return rs;
    }
	
}
